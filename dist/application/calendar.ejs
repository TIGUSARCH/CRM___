<!DOCTYPE html>
<html lang="en">
<!-- [Head] start -->

<head>
  <title>Calendar | DC&F+</title>
  <!-- [Meta] -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimal-ui">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="description" content="Able Pro is trending dashboard template made using Bootstrap 5 design framework. Able Pro is available in Bootstrap, React, CodeIgniter, Angular,  and .net Technologies.">
  <meta name="keywords" content="Bootstrap admin template, Dashboard UI Kit, Dashboard Template, Backend Panel, react dashboard, angular dashboard">
  <!-- <meta name="author" content="Phoenixcoded"> -->

  <!-- [Favicon] icon -->
  <!-- <link rel="icon" href="../assets/images/favicon.svg" type="image/x-icon"> --> <!-- aqui podemos colocar el iconopara la página -->
  <!-- [Font] Family -->
  <link rel="stylesheet" href="../assets/fonts/inter/inter.css" id="main-font-link" />
  <!-- [Tabler Icons] https://tablericons.com -->
  <link rel="stylesheet" href="../assets/fonts/tabler-icons.min.css" >
  <!-- [Feather Icons] https://feathericons.com -->
  <link rel="stylesheet" href="../assets/fonts/feather.css" >
  <!-- [Font Awesome Icons] https://fontawesome.com/icons -->
  <link rel="stylesheet" href="../assets/fonts/fontawesome.css" >
  <!-- [Material Icons] https://fonts.google.com/icons -->
  <link rel="stylesheet" href="../assets/fonts/material.css" >
  <!-- [Template CSS Files] -->
  <link rel="stylesheet" href="../assets/css/style.css" id="main-style-link" >
  <link rel="stylesheet" href="../assets/css/style-preset.css" >
  <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.9.0/main.min.css' rel='stylesheet' />
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@5.9.0/main.min.js'></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-14K1GBX9FG"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'G-14K1GBX9FG');
  </script>
  <!-- WiserNotify -->
  <script>
    !(function () {
      if (window.t4hto4) console.log('WiserNotify pixel installed multiple time in this page');
      else {
        window.t4hto4 = !0;
        var t = document,
          e = window,
          n = function () {
            var e = t.createElement('script');
            (e.type = 'text/javascript'),
              (e.async = !0),
              (e.src = 'https://pt.wisernotify.com/pixel.js?ti=1jclj6jkfc4hhry'),
              document.body.appendChild(e);
          };
        'complete' === t.readyState ? n() : window.attachEvent ? e.attachEvent('onload', n) : e.addEventListener('load', n, !1);
      }
    })();
  </script>
  <!-- Microsoft clarity -->
  <script type="text/javascript">
    (function (c, l, a, r, i, t, y) {
      c[a] =
        c[a] ||
        function () {
          (c[a].q = c[a].q || []).push(arguments);
        };
      t = l.createElement(r);
      t.async = 1;
      t.src = 'https://www.clarity.ms/tag/' + i;
      y = l.getElementsByTagName(r)[0];
      y.parentNode.insertBefore(t, y);
    })(window, document, 'clarity', 'script', 'gkn6wuhrtb');
  </script>

</head>
<!-- [Head] end -->
<!-- [Body] Start -->

<body data-pc-preset="preset-1" data-pc-sidebar-caption="true" data-pc-direction="ltr" data-pc-theme_contrast="" data-pc-theme="light">
  <!-- [ Pre-loader ] start -->
<div class="loader-bg">
  <div class="loader-track">
    <div class="loader-fill"></div>
  </div>
</div>
<!-- [ Pre-loader ] End -->
 <!-- [ Sidebar Menu ] start -->

 <%- include('navbar')%> 

<!-- [ Sidebar Menu ] end --> <!-- [ Header Topbar ] start -->

<!-- [ Header ] end -->



  <!-- [ Main Content ] start -->
  <div class="pc-container">
    <div class="pc-content">
      <!-- [ breadcrumb ] start -->
      <div class="page-header">
        <div class="page-block">
          <div class="row">
            <div class="col-xl-4 col-md-12">
              <div class="card">
                <div class="card-body pb-0">
                  <div class="d-flex align-items-center justify-content-between">
                    <h5 class="mb-0">My Task</h5>
                  </div>
                </div>
                <ul id="tareas-list" class="list-group list-group-flush border-top-0">  
                </ul>
              </div>
            </div>
            <div class="col-xl-4 col-md-12">
              <div class="card">
                <div class="card-body pb-0">
                  <div class="d-flex align-items-center justify-content-between">
                    <h5 class="mb-0">My Task</h5>
                  </div>
                </div>
                <ul id="eventos-list" class="list-group list-group-flush border-top-0">  
                </ul>
              </div>
            </div>
            <div class="col-xl-4 col-md-12">
              <div class="card">
                <div class="card-body pb-0">
                  <div class="d-flex align-items-center justify-content-between">
                    <h5 class="mb-0">My Task</h5>
                  </div>
                </div>
                <ul id="citas-list" class="list-group list-group-flush border-top-0">  
                </ul>
              </div>
            </div>
          </div>
          <div class="row align-items-center">
            <div class="col-md-12">
              <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="../dashboard">Home</a></li>
                <li class="breadcrumb-item"><a href="javascript: void(0)">Application</a></li>
                <li class="breadcrumb-item" aria-current="page">Calendar</li>
              </ul>
            </div>
            <div class="col-md-12">
              <div class="page-header-title">
                <h2 class="mb-0">Calendar</h2>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- [ breadcrumb ] end -->

      <!-- [ Main Content ] start -->
      <div class="row">
        <!-- [ sample-page ] start -->
        <div class="col-12">
          <div class="card">
            <div class="card-body position-relative">
              <div id="calendar"></div>
            </div>
          </div>
        </div>
        <!-- [ sample-page ] end -->
      </div>
      <!-- [ Main Content ] end -->
    </div>
  </div>

  

  <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">Detalle de la Cita</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Nombre:</strong> <span id="modal-nombre"></span></p>
                <p><strong>Descripción:</strong> <span id="modal-descripcion"></span></p>
                <p><strong>Fecha:</strong> <span id="modal-fecha"></span></p>
                <p><strong>Hora de Inicio:</strong> <span id="modal-hora-inicio"></span></p>
                <p><strong>Hora de Fin:</strong> <span id="modal-hora-fin"></span></p>
                <p><strong>Cliente:</strong> <span id="modal-cliente"></span></p>
                <p><strong>Contacto Cliente:</strong> <span id="modal-contacto-cliente"></span></p>
                <p><strong>Usuario:</strong> <span id="modal-usuario"></span></p>
                <p><strong>Contacto Usuario:</strong> <span id="modal-contacto-usuario"></span></p>
                <p><strong>Enlace:</strong> <a id="modal-enlace" href="#" target="_blank">Enlace</a></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    // Función para formatear la fecha
    const formatDate = (dateString) => {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(dateString).toLocaleDateString('es-MX', options);
    };

    const renderTareas = (tareas) => {
        const tareasList = document.getElementById('tareas-list');
        tareasList.innerHTML = '';
        tareas.forEach(tarea => {
            const usuario = tarea.Usuario ? `${tarea.Usuario.nombre} ${tarea.Usuario.apellidoPaterno} ${tarea.Usuario.apellidoMaterno}` : 'Desconocido';
            const rol = tarea.Usuario && tarea.Usuario.Rol ? tarea.Usuario.Rol.tipo : 'Desconocido';
            const contacto = tarea.Usuario ? `${tarea.Usuario.telefono}, ${tarea.Usuario.correoElectronico}` : 'Desconocido';
            const li = document.createElement('li');
            li.setAttribute('data-id', tarea.id);
            li.classList.add('list-group-item');
            li.innerHTML = `
                <strong>${tarea.nombre}</strong> - ${tarea.descripcion} - ${tarea.estado} - Fecha de vencimiento: ${formatDate(tarea.fechaVencimiento)}<br>
                Creado: ${formatDate(tarea.createdAt)}<br>
                Actualizado: ${formatDate(tarea.updatedAt)}<br>
                Asignado a: ${usuario}<br>
                Rol: ${rol}<br>
                Contacto: ${contacto}
            `;
            tareasList.appendChild(li);
        });
    };

    const renderCitas = (citas) => {
        const citasList = document.getElementById('citas-list');
        citasList.innerHTML = '';
        citas.forEach(cita => {
            const usuario = cita.Usuario ? `${cita.Usuario.nombre} ${cita.Usuario.apellidoPaterno} ${cita.Usuario.apellidoMaterno}` : 'Desconocido';
            const rol = cita.Usuario && cita.Usuario.Rol ? cita.Usuario.Rol.tipo : 'Desconocido';
            const contactoUsuario = cita.Usuario ? `${cita.Usuario.telefono}, ${cita.Usuario.correoElectronico}` : 'Desconocido';
            const cliente = cita.Cliente ? `${cita.Cliente.nombre} ${cita.Cliente.apellidoPaterno} ${cita.Cliente.apellidoMaterno}` : 'Desconocido';
            const contactoCliente = cita.Cliente ? `${cita.Cliente.telefono}, ${cita.Cliente.correoElectronico}` : 'Desconocido';
            const li = document.createElement('li');
            li.setAttribute('data-id', cita.id);
            li.classList.add('list-group-item');
            li.innerHTML = `
                <strong>${cita.nombre}</strong> - ${cita.descripcion} - ${cita.estado} - Fecha: ${formatDate(cita.fecha)}<br>
                Hora: ${new Date(cita.horaInicio).toLocaleTimeString('es-MX')} - ${new Date(cita.horaFin).toLocaleTimeString('es-MX')}<br>
                Lugar: ${cita.lugar}<br>
                Enlace: <a href="${cita.enlace}" target="_blank">${cita.enlace}</a><br>
                Documentos: ${cita.documentos}<br>
                Asignado a: ${usuario}<br>
                Rol: ${rol}<br>
                Cliente: ${cliente}<br>
                Contacto Cliente: ${contactoCliente}
            `;
            citasList.appendChild(li);
        });
    };

    const renderEventos = (eventos) => {
        const eventosList = document.getElementById('eventos-list');
        eventosList.innerHTML = '';
        eventos.forEach(evento => {
            const creador = evento.Usuario ? `${evento.Usuario.nombre} ${evento.Usuario.apellidoPaterno} ${evento.Usuario.apellidoMaterno}` : 'Desconocido';
            const contactoCreador = evento.Usuario ? `${evento.Usuario.telefono}, ${evento.Usuario.correoElectronico}` : 'Desconocido';
            const li = document.createElement('li');
            li.setAttribute('data-id', evento.id);
            li.classList.add('list-group-item');
            li.innerHTML = `
                <strong>${evento.titulo}</strong> - ${evento.descripcion} - ${evento.estado} - Fecha de inicio: ${formatDate(evento.fechaInicio)}<br>
                Fecha de fin: ${formatDate(evento.fechaFin)}<br>
                Categoría: ${evento.categoria}<br>
                Tipo: ${evento.tipo}<br>
                Creado por: ${creador}<br>
                Contacto: ${contactoCreador}
            `;
            eventosList.appendChild(li);
        });
    };

    // Inicializar el calendario
    document.addEventListener('DOMContentLoaded', function() {
        const calendarEl = document.getElementById('calendar');

        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            events: [],
            eventClick: function(info) {
                $('#modal-nombre').text(info.event.title);
                $('#modal-descripcion').text(info.event.extendedProps.descripcion);
                $('#modal-fecha').text(formatDate(info.event.start));
                $('#modal-hora-inicio').text(info.event.start.toLocaleTimeString('es-MX'));
                $('#modal-hora-fin').text(info.event.end.toLocaleTimeString('es-MX'));
                $('#modal-cliente').text(info.event.extendedProps.cliente);
                $('#modal-contacto-cliente').text(info.event.extendedProps.contactoCliente);
                $('#modal-usuario').text(info.event.extendedProps.usuario);
                $('#modal-contacto-usuario').text(info.event.extendedProps.contactoUsuario);
                $('#modal-enlace').attr('href', info.event.extendedProps.enlace);
                $('#eventModal').modal('show');
            }
        });

        calendar.render();

        const convertCitasToEvents = (citas) => {
            return citas.map(cita => ({
                id: cita.id,
                title: cita.nombre,
                start: cita.horaInicio,
                end: cita.horaFin,
                extendedProps: {
                    descripcion: cita.descripcion,
                    cliente: cita.Cliente ? `${cita.Cliente.nombre} ${cita.Cliente.apellidoPaterno} ${cita.Cliente.apellidoMaterno}` : 'Desconocido',
                    contactoCliente: cita.Cliente ? `${cita.Cliente.telefono}, ${cita.Cliente.correoElectronico}` : 'Desconocido',
                    usuario: cita.Usuario ? `${cita.Usuario.nombre} ${cita.Usuario.apellidoPaterno} ${cita.Usuario.apellidoMaterno}` : 'Desconocido',
                    contactoUsuario: cita.Usuario ? `${cita.Usuario.telefono}, ${cita.Usuario.correoElectronico}` : 'Desconocido',
                    enlace: cita.enlace
                }
            }));
        };

        // Obtener y renderizar citas
        fetch('/citas')
            .then(response => response.json())
            .then(citas => {
                const events = convertCitasToEvents(citas);
                calendar.addEventSource(events);
                renderCitas(citas); // Asegurarse de renderizar la lista de citas
            })
            .catch(error => {
                console.error('Error al cargar las citas:', error);
            });

        socket.on('citaCreada', (cita) => {
            const event = {
                id: cita.id,
                title: cita.nombre,
                start: cita.horaInicio,
                end: cita.horaFin,
                extendedProps: {
                    descripcion: cita.descripcion,
                    cliente: cita.Cliente ? `${cita.Cliente.nombre} ${cita.Cliente.apellidoPaterno} ${cita.Cliente.apellidoMaterno}` : 'Desconocido',
                    contactoCliente: cita.Cliente ? `${cita.Cliente.telefono}, ${cita.Cliente.correoElectronico}` : 'Desconocido',
                    usuario: cita.Usuario ? `${cita.Usuario.nombre} ${cita.Usuario.apellidoPaterno} ${cita.Usuario.apellidoMaterno}` : 'Desconocido',
                    contactoUsuario: cita.Usuario ? `${cita.Usuario.telefono}, ${cita.Usuario.correoElectronico}` : 'Desconocido',
                    enlace: cita.enlace
                }
            };
            calendar.addEvent(event);

            // Agregar cita a la lista de citas
            const citasList = document.getElementById('citas-list');
            const usuario = cita.Usuario ? `${cita.Usuario.nombre} ${cita.Usuario.apellidoPaterno} ${cita.Usuario.apellidoMaterno}` : 'Desconocido';
            const rol = cita.Usuario && cita.Usuario.Rol ? cita.Usuario.Rol.tipo : 'Desconocido';
            const contactoUsuario = cita.Usuario ? `${cita.Usuario.telefono}, ${cita.Usuario.correoElectronico}` : 'Desconocido';
            const cliente = cita.Cliente ? `${cita.Cliente.nombre} ${cita.Cliente.apellidoPaterno} ${cita.Cliente.apellidoMaterno}` : 'Desconocido';
            const contactoCliente = cita.Cliente ? `${cita.Cliente.telefono}, ${cita.Cliente.correoElectronico}` : 'Desconocido';
            const li = document.createElement('li');
            li.setAttribute('data-id', cita.id);
            li.classList.add('list-group-item');
            li.innerHTML = `
                <strong>${cita.nombre}</strong> - ${cita.descripcion} - ${cita.estado} - Fecha: ${formatDate(cita.fecha)}<br>
                Hora: ${new Date(cita.horaInicio).toLocaleTimeString('es-MX')} - ${new Date(cita.horaFin).toLocaleTimeString('es-MX')}<br>
                Lugar: ${cita.lugar}<br>
                Enlace: <a href="${cita.enlace}" target="_blank">${cita.enlace}</a><br>
                Documentos: ${cita.documentos}<br>
                Asignado a: ${usuario}<br>
                Rol: ${rol}<br>
                Cliente: ${cliente}<br>
                Contacto Cliente: ${contactoCliente}
            `;
            citasList.appendChild(li);
        });

        socket.on('citaActualizada', (cita) => {
            const event = calendar.getEventById(cita.id);
            if (event) {
                event.setProp('title', cita.nombre);
                event.setStart(cita.horaInicio);
                event.setEnd(cita.horaFin);
                event.setExtendedProp('descripcion', cita.descripcion);
                event.setExtendedProp('cliente', cita.Cliente ? `${cita.Cliente.nombre} ${cita.Cliente.apellidoPaterno} ${cita.Cliente.apellidoMaterno}` : 'Desconocido');
                event.setExtendedProp('contactoCliente', cita.Cliente ? `${cita.Cliente.telefono}, ${cita.Cliente.correoElectronico}` : 'Desconocido');
                event.setExtendedProp('usuario', cita.Usuario ? `${cita.Usuario.nombre} ${cita.Usuario.apellidoPaterno} ${cita.Usuario.apellidoMaterno}` : 'Desconocido');
                event.setExtendedProp('contactoUsuario', cita.Usuario ? `${cita.Usuario.telefono}, ${cita.Usuario.correoElectronico}` : 'Desconocido');
                event.setExtendedProp('enlace', cita.enlace);
            }

            // Actualizar la lista de citas
            const citasList = document.getElementById('citas-list');
            const items = citasList.getElementsByTagName('li');
            for (let item of items) {
                if (item.getAttribute('data-id') === cita.id) {
                    const usuario = cita.Usuario ? `${cita.Usuario.nombre} ${cita.Usuario.apellidoPaterno} ${cita.Usuario.apellidoMaterno}` : 'Desconocido';
                    const rol = cita.Usuario && cita.Usuario.Rol ? cita.Usuario.Rol.tipo : 'Desconocido';
                    const contactoUsuario = cita.Usuario ? `${cita.Usuario.telefono}, ${cita.Usuario.correoElectronico}` : 'Desconocido';
                    const cliente = cita.Cliente ? `${cita.Cliente.nombre} ${cita.Cliente.apellidoPaterno} ${cita.Cliente.apellidoMaterno}` : 'Desconocido';
                    const contactoCliente = cita.Cliente ? `${cita.Cliente.telefono}, ${cita.Cliente.correoElectronico}` : 'Desconocido';
                    item.innerHTML = `
                        <strong>${cita.nombre}</strong> - ${cita.descripcion} - ${cita.estado} - Fecha: ${formatDate(cita.fecha)}<br>
                        Hora: ${new Date(cita.horaInicio).toLocaleTimeString('es-MX')} - ${new Date(cita.horaFin).toLocaleTimeString('es-MX')}<br>
                        Lugar: ${cita.lugar}<br>
                        Enlace: <a href="${cita.enlace}" target="_blank">${cita.enlace}</a><br>
                        Documentos: ${cita.documentos}<br>
                        Asignado a: ${usuario}<br>
                        Rol: ${rol}<br>
                        Cliente: ${cliente}<br>
                        Contacto Cliente: ${contactoCliente}
                    `;
                    break;
                }
            }
        });

        socket.on('citaEliminada', ({ id }) => {
            const event = calendar.getEventById(id);
            if (event) {
                event.remove();
            }

            // Eliminar de la lista de citas
            const citasList = document.getElementById('citas-list');
            const items = citasList.getElementsByTagName('li');
            for (let item of items) {
                if (item.getAttribute('data-id') === id) {
                    citasList.removeChild(item);
                    break;
                }
            }
        });
    });

    socket.on('connect', () => {
        console.log('Conectado al servidor con ID:', socket.id);
    });

    socket.on('disconnect', () => {
        console.log('Desconectado del servidor');
    });

    socket.on('tareas', (tareas) => {
        console.log('Tareas recibidas:', tareas);
        renderTareas(tareas);
    });

    socket.on('citas', (citas) => {
        console.log('Citas recibidas:', citas);
        const events = convertCitasToEvents(citas);
        calendar.addEventSource(events);
        renderCitas(citas);
    });

    socket.on('eventos', (eventos) => {
        console.log('Eventos recibidos:', eventos);
        renderEventos(eventos);
    });

    socket.on('tareaCreada', (tarea) => {
        const tareasList = document.getElementById('tareas-list');
        const usuario = tarea.Usuario ? `${tarea.Usuario.nombre} ${tarea.Usuario.apellidoPaterno} ${tarea.Usuario.apellidoMaterno}` : 'Desconocido';
        const rol = tarea.Usuario && tarea.Usuario.Rol ? tarea.Usuario.Rol.tipo : 'Desconocido';
        const contacto = tarea.Usuario ? `${tarea.Usuario.telefono}, ${tarea.Usuario.correoElectronico}` : 'Desconocido';
        const li = document.createElement('li');
        li.setAttribute('data-id', tarea.id);
        li.innerHTML = `
            <strong>${tarea.nombre}</strong> - ${tarea.descripcion} - ${tarea.estado} - Fecha de vencimiento: ${formatDate(tarea.fechaVencimiento)}<br>
            Creado: ${formatDate(tarea.createdAt)}<br>
            Actualizado: ${formatDate(tarea.updatedAt)}<br>
            Asignado a: ${usuario}<br>
            Rol: ${rol}<br>
            Contacto: ${contacto}
        `;
        tareasList.appendChild(li);
    });

    socket.on('tareaActualizada', (tarea) => {
        const tareasList = document.getElementById('tareas-list');
        const items = tareasList.getElementsByTagName('li');
        for (let item of items) {
            if (item.getAttribute('data-id') === tarea.id) {
                const usuario = tarea.Usuario ? `${tarea.Usuario.nombre} ${tarea.Usuario.apellidoPaterno} ${tarea.Usuario.apellidoMaterno}` : 'Desconocido';
                const rol = tarea.Usuario && tarea.Usuario.Rol ? tarea.Usuario.Rol.tipo : 'Desconocido';
                const contacto = tarea.Usuario ? `${tarea.Usuario.telefono}, ${tarea.Usuario.correoElectronico}` : 'Desconocido';
                item.innerHTML = `
                    <strong>${tarea.nombre}</strong> - ${tarea.descripcion} - ${tarea.estado} - Fecha de vencimiento: ${formatDate(tarea.fechaVencimiento)}<br>
                    Creado: ${formatDate(tarea.createdAt)}<br>
                    Actualizado: ${formatDate(tarea.updatedAt)}<br>
                    Asignado a: ${usuario}<br>
                    Rol: ${rol}<br>
                    Contacto: ${contacto}
                `;
                break;
            }
        }
    });

    socket.on('estadoTareaActualizado', (tarea) => {
        const tareasList = document.getElementById('tareas-list');
        const items = tareasList.getElementsByTagName('li');
        for (let item of items) {
            if (item.getAttribute('data-id') === tarea.id) {
                const usuario = tarea.Usuario ? `${tarea.Usuario.nombre} ${tarea.Usuario.apellidoPaterno} ${tarea.Usuario.apellidoMaterno}` : 'Desconocido';
                const rol = tarea.Usuario && tarea.Usuario.Rol ? tarea.Usuario.Rol.tipo : 'Desconocido';
                const contacto = tarea.Usuario ? `${tarea.Usuario.telefono}, ${tarea.Usuario.correoElectronico}` : 'Desconocido';
                item.innerHTML = `
                    <strong>${tarea.nombre}</strong> - ${tarea.descripcion} - ${tarea.estado} - Fecha de vencimiento: ${formatDate(tarea.fechaVencimiento)}<br>
                    Creado: ${formatDate(tarea.createdAt)}<br>
                    Actualizado: ${formatDate(tarea.updatedAt)}<br>
                    Asignado a: ${usuario}<br>
                    Rol: ${rol}<br>
                    Contacto: ${contacto}
                `;
                break;
            }
        }
    });

    socket.on('tareaEliminada', ({ id }) => {
        const tareasList = document.getElementById('tareas-list');
        const items = tareasList.getElementsByTagName('li');
        for (let item of items) {
            if (item.getAttribute('data-id') === id) {
                tareasList.removeChild(item);
                break;
            }
        }
    });

    socket.on('eventoCreado', (evento) => {
        const eventosList = document.getElementById('eventos-list');
        const creador = evento.Usuario ? `${evento.Usuario.nombre} ${evento.Usuario.apellidoPaterno} ${evento.Usuario.apellidoMaterno}` : 'Desconocido';
        const contactoCreador = evento.Usuario ? `${evento.Usuario.telefono}, ${evento.Usuario.correoElectronico}` : 'Desconocido';
        const li = document.createElement('li');
        li.setAttribute('data-id', evento.id);
        li.classList.add('list-group-item');
        li.innerHTML = `
            <strong>${evento.titulo}</strong> - ${evento.descripcion} - ${evento.estado} - Fecha de inicio: ${formatDate(evento.fechaInicio)}<br>
            Fecha de fin: ${formatDate(evento.fechaFin)}<br>
            Categoría: ${evento.categoria}<br>
            Tipo: ${evento.tipo}<br>
            Creado por: ${creador}<br>
            Contacto: ${contactoCreador}
        `;
        eventosList.appendChild(li);
    });

    socket.on('eventoActualizado', (evento) => {
        const eventosList = document.getElementById('eventos-list');
        const items = eventosList.getElementsByTagName('li');
        for (let item of items) {
            if (item.getAttribute('data-id') === evento.id) {
                const creador = evento.Usuario ? `${evento.Usuario.nombre} ${evento.Usuario.apellidoPaterno} ${evento.Usuario.apellidoMaterno}` : 'Desconocido';
                const contactoCreador = evento.Usuario ? `${evento.Usuario.telefono}, ${evento.Usuario.correoElectronico}` : 'Desconocido';
                item.innerHTML = `
                    <strong>${evento.titulo}</strong> - ${evento.descripcion} - ${evento.estado} - Fecha de inicio: ${formatDate(evento.fechaInicio)}<br>
                    Fecha de fin: ${formatDate(evento.fechaFin)}<br>
                    Categoría: ${evento.categoria}<br>
                    Tipo: ${evento.tipo}<br>
                    Creado por: ${creador}<br>
                    Contacto: ${contactoCreador}
                `;
                break;
            }
        }
    });

    socket.on('estadoEventoActualizado', (evento) => {
        const eventosList = document.getElementById('eventos-list');
        const items = eventosList.getElementsByTagName('li');
        for (let item of items) {
            if (item.getAttribute('data-id') === evento.id) {
                const creador = evento.Usuario ? `${evento.Usuario.nombre} ${evento.Usuario.apellidoPaterno} ${evento.Usuario.apellidoMaterno}` : 'Desconocido';
                const contactoCreador = evento.Usuario ? `${evento.Usuario.telefono}, ${evento.Usuario.correoElectronico}` : 'Desconocido';
                item.innerHTML = `
                    <strong>${evento.titulo}</strong> - ${evento.descripcion} - ${evento.estado} - Fecha de inicio: ${formatDate(evento.fechaInicio)}<br>
                    Fecha de fin: ${formatDate(evento.fechaFin)}<br>
                    Categoría: ${evento.categoria}<br>
                    Tipo: ${evento.tipo}<br>
                    Creado por: ${creador}<br>
                    Contacto: ${contactoCreador}
                `;
                break;
            }
        }
    });

    socket.on('eventoEliminado', ({ id }) => {
        const eventosList = document.getElementById('eventos-list');
        const items = eventosList.getElementsByTagName('li');
        for (let item of items) {
            if (item.getAttribute('data-id') === id) {
                eventosList.removeChild(item);
                break;
            }
        }
    });

    // Inicialmente cargar las tareas, citas, eventos y disponibilidad desde el servidor
    fetch('/tareas')
        .then(response => response.json())
        .then(tareas => {
            renderTareas(tareas);
        })
        .catch(error => {
            console.error('Error al cargar las tareas:', error);
        });

    fetch('/citas')
        .then(response => response.json())
        .then(citas => {
            renderCitas(citas);
            const events = convertCitasToEvents(citas);
            calendar.addEventSource(events);
        })
        .catch(error => {
            console.error('Error al cargar las citas:', error);
        });

    fetch('/eventos')
        .then(response => response.json())
        .then(eventos => {
            renderEventos(eventos);
        })
        .catch(error => {
            console.error('Error al cargar los eventos:', error);
        });

    fetch('/disponibilidad')
        .then(response => response.json())
        .then(disponibilidad => {
            renderDisponibilidad(disponibilidad);
        })
        .catch(error => {
            console.error('Error al cargar la disponibilidad:', error);
        });
</script>

  <!-- [ Main Content ] end -->
 <!-- Required Js -->
<script src="../assets/js/plugins/popper.min.js"></script>
<script src="../assets/js/plugins/simplebar.min.js"></script>
<script src="../assets/js/plugins/bootstrap.min.js"></script>
<script src="../assets/js/fonts/custom-font.js"></script>
<script src="../assets/js/pcoded.js"></script>
<script src="../assets/js/plugins/feather.min.js"></script>





<script>layout_change(ligth);</script>




<script>layout_theme_contrast_change('false');</script>



<script>change_box_container('false');</script>


<script>layout_caption_change('true');</script>




<script>layout_rtl_change('false');</script>


<script>preset_change("preset-9");</script>

  <!-- [Page Specific JS] start -->
  <!-- calender js -->

  <!-- Sweet Alert -->
  <script src="../assets/js/plugins/sweetalert2.all.min.js"></script>

  <script src="../assets/js/form-handler.js"></script>
  <!-- [Page Specific JS] end -->

</body>
<!-- [Body] end -->

</html>